exp(1)
learnr::run_tutorial("1.2", package = "QTM150Tutorials")
learnr::run_tutorial("1.3", package = "QTM150Tutorials")
?
l
ggplot(data = penguins, mapping=aes(body_mass_g, flipper_length_mm))+
geom_point()
#setwd("D:Coding/QTM150")
pacman::p_load(tidyverse, penguins, ggplot)
learnr::run_tutorial("2.3", package = "QTM150Tutorials")
learnr::run_tutorial("1.3", package = "QTM150Tutorials")
ggplot(data = penguins, mapping=aes(body_mass_g, flipper_length_mm))+
geom_point()
ggplot(data = penguins, mapping=aes(body_mass_g, flipper_length_mm))+
geom_point()
ggplot(data = penguins, mapping=aes(body_mass_g, flipper_length_mm))+
geom_point()
glimpse(penguins)
penguins = data(penguins)
glimpse(penguins)
learnr::run_tutorial("3.1", "QTM150Tutorials")
learnr::run_tutorial("3.2", "QTM150Tutorials")
learnr::run_tutorial("3.2", "QTM150Tutorials")
learnr::run_tutorial("3.2", "QTM150Tutorials")
learnr::run_tutorial("3.3","QTM150Tutorials")
pacman::p_load(devtools)
install_github("zbinney/QTM150")
learnr::run_tutorial("4.2", "QTM150Tutorials")
learnr::run_tutorial("4.1", "QTM150Tutorials")
learnr::run_tutorial("4.3", "QTM150Tutorials")
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
c(bday_list)
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_vec <- c("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_vec <- c("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
print(bday_list)
print(bday_vec)
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_vec <- c("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
print(bday_list)
print(bday_vec)
# Coersion forces the data type to be string for the vector because
# the string data type is the most complicated out of the data types
# encountered (int, str, bool)
a_list <- lst(a = 1:3, b="a string", c=pi, d=list("Harrison Ford", "Ke Huy Quan"))
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_vec <- c("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
print(bday_list)
print(bday_vec)
# Coersion forces the data type to be string for the vector because
# the string data type is the most complicated out of the data types
# encountered (int, str, bool)
a_list <- list(a = 1:3, b="a string", c=pi, d=list("Harrison Ford", "Ke Huy Quan"))
View(a_list)
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_vec <- c("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
print(bday_list)
print(bday_vec)
# Coersion forces the data type to be string for the vector because
# the string data type is the most complicated out of the data types
# encountered (int, str, bool)
a_list <- list(a = 1:3, b="a string", c=pi, d=list("Harrison Ford", "Ke Huy Quan"))
print(a[3])
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_vec <- c("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
print(bday_list)
print(bday_vec)
# Coersion forces the data type to be string for the vector because
# the string data type is the most complicated out of the data types
# encountered (int, str, bool)
a_list <- list(a = 1:3, b="a string", c=pi, d=list("Harrison Ford", "Ke Huy Quan"))
print(a_list[3])
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_vec <- c("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
print(bday_list)
print(bday_vec)
# Coersion forces the data type to be string for the vector because
# the string data type is the most complicated out of the data types
# encountered (int, str, bool)
a_list <- list(a = 1:3, b="a string", c=pi, d=list("Harrison Ford", "Ke Huy Quan"))
print(a_list[3])
thing <- a_list[3]
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_vec <- c("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
print(bday_list)
print(bday_vec)
# Coersion forces the data type to be string for the vector because
# the string data type is the most complicated out of the data types
# encountered (int, str, bool)
a_list <- list(a = 1:3, b="a string", c=pi, d=list("Harrison Ford", "Ke Huy Quan"))
print(a_list[3])
# pi as vector of size 1
thing <- a_list[[3]]
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_vec <- c("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
print(bday_list)
print(bday_vec)
# Coersion forces the data type to be string for the vector because
# the string data type is the most complicated out of the data types
# encountered (int, str, bool)
a_list <- list(a = 1:3, b="a string", c=pi, d=list("Harrison Ford", "Ke Huy Quan"))
print(a_list[3])
# pi as vector of size 1
thing <- a_list[[3]]
# pi as the sole element of a list of size 1
thing_list <- a_list[3]
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_vec <- c("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
print(bday_list)
print(bday_vec)
# Coersion forces the data type to be string for the vector because
# the string data type is the most complicated out of the data types
# encountered (int, str, bool)
a_list <- list(a = 1:3,
b="a string",
c=pi,
d=list("Harrison Ford", "Ke Huy Quan"))
print(a_list[3])
# pi as vector of size 1
thing <- a_list[[3]]
# pi as the sole element of a list of size 1
thing_list <- a_list[3]
# "Ke Huy Quan"
pasteything <- a_list[4]
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_vec <- c("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
print(bday_list)
print(bday_vec)
# Coersion forces the data type to be string for the vector because
# the string data type is the most complicated out of the data types
# encountered (int, str, bool)
a_list <- list(a = 1:3,
b="a string",
c=pi,
d=list("Harrison Ford", "Ke Huy Quan"))
print(a_list[3])
# pi as vector of size 1
thing <- a_list[[3]]
# pi as the sole element of a list of size 1
thing_list <- a_list[3]
# "Ke Huy Quan"
pasteything <- a_list[[4]][2]
View(pasteything)
bday_list <- list("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
bday_vec <- c("Happy Birthday to You!", "How Old Are You?", 34L, TRUE)
print(bday_list)
print(bday_vec)
# Coersion forces the data type to be string for the vector because
# the string data type is the most complicated out of the data types
# encountered (int, str, bool)
a_list <- list(a = 1:3,
b="a string",
c=pi,
d=list("Harrison Ford", "Ke Huy Quan"))
print(a_list[3])
# pi as vector of size 1
thing <- a_list[[3]]
# pi as the sole element of a list of size 1
thing_list <- a_list[3]
# "Ke Huy Quan"
pasteything <- a_list[[4]][[2]]
learnr::run_tut
learnr::run_tutorial("5.2", "QTM150Tutorials")
learnr::run_tutorial("6.1", "QTM150Tutorials")
pacman::p_load(tidyverse, stringr)
things <- c("abcd", "$^$")
pacman::p_load(tidyverse, stringr)
things <- c("abcd", "$^$")
str_match(things, "\\$\\^\\$")
pacman::p_load(tidyverse, stringr)
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(things, "^a")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "$x")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_view(stringr::words, "[^aeiou]")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_view(stringr::words, "[^aeiou]")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^a]")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]")
str_subset(stringr::words, "(ing|ise)$")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]")
str_subset(stringr::words, "[^e]ed$")
str_subset(stringr::words, "(ing|ise)$")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]")
str_subset(stringr::words, "ed$")
str_subset(stringr::words, "(ing|ise)$")
[^e]
ed$
pacman::p_load(tidyverse, stringr)
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]")
str_subset(stringr::words, "[^e]ed$")
str_subset(stringr::words, "(ing|ise)$")
pacman::p_load(tidyverse, stringr)
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]")
str_subset(stringr::words, "[^e]ed$")
str_subset(stringr::words, "(ing|ise)$")
pacman::p_load(tidyverse, stringr)
# https://r4ds.had.co.nz/strings.html#character-classes-and-alternatives
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]")
str_subset(stringr::words, "[^e]ed$")
str_subset(stringr::words, "(ing|ise)$")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC?")
pacman::p_load(tidyverse, stringr)
# https://r4ds.had.co.nz/strings.html#character-classes-and-alternatives
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]")
str_subset(stringr::words, "[^e]ed$")
str_subset(stringr::words, "(ing|ise)$")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC+")
pacman::p_load(tidyverse)
# https://r4ds.had.co.nz/strings.html#character-classes-and-alternatives
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^a")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]")
str_subset(stringr::words, "[^e]ed$")
str_subset(stringr::words, "(ing|ise)$")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC+")
pacman::p_load(tidyverse)
# https://r4ds.had.co.nz/strings.html#character-classes-and-alternatives
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^y")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]")
str_subset(stringr::words, "[^e]ed$")
str_subset(stringr::words, "(ing|ise)$")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC+")
pacman::p_load(tidyverse)
# https://r4ds.had.co.nz/strings.html#character-classes-and-alternatives
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^y")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
str_subset(stringr::words, ".......")
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]")
str_subset(stringr::words, "[^e]ed$")
str_subset(stringr::words, "(ing|ise)$")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC+")
str_subset(stringr::words, ".......")
pacman::p_load(tidyverse)
# https://r4ds.had.co.nz/strings.html#character-classes-and-alternatives
# 14.3.2.1.1
things <- c("abcd", "$^$")
str_subset(things, "\\$\\^\\$")
# 14.3.2.1.2
str_subset(stringr::words, "^y")
str_subset(stringr::words, "x$")
str_subset(stringr::words, "^...$")
stringr::words[str_length(stringr::words) >= 7]
str_subset(stringr::words, ".......")
# 14.3.3.1
str_subset(stringr::words, "^[aeiou]")
str_subset(stringr::words, "[^aeiou]*")
str_subset(stringr::words, "[^e]ed$")
str_subset(stringr::words, "(ing|ise)$")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC+")
str_subset(stringr::words, "[^aeiou]*")
str_subset(stringr::words, "[^aeiou]+")
str_subset(stringr::words, "^[^aeiou]+$")
pacman::p_install(formatR)
tinytex::install_tinytex()
tinytex
setwd("D:/Coding/QTM150")
source("D:/Coding/QTM150/codebookforproject.Rmd")
source("D:/Coding/QTM150/codebookforproject.Rmd")
source("D:/Coding/QTM150/codebookforproject.Rmd")
library(codebookr)
library(codebook)
source("D:/Coding/QTM150/codebookforproject.Rmd")
source("D:/Coding/QTM150/codebookforproject.Rmd")
list(`How old are you?` = "Age of participants in the study")
thing <- `How old are you?` = "Age of participants in the study"
thing <- list(`How old are you?` = "Age of participants in the study")
thing
thing <- list(
`How old are you?` = "Age of participants in the study",
`What industry do you work in?` = "industry participants work in",
`Job title` = "participants job title",
`If your job title needs additional context, please clarify here:` = "participants given opportunity to elaborate on the nature of their job",
`What is your annual salary? (You'll indicate the currency in a later question. If you are part-time or hourly, please enter an annualized equivalent -- what you would earn if you worked the job 40 hours a week, 52 weeks a year.)` = "Participants' annual salary based on if they worked 40 hours and 52 weeks per year.")
thing
thing <- list(`How much additional monetary compensation do you get, if any (for example, bonuses or overtime in an average year)? Please only include monetary compensation here, not the value of benefits.` = "Monetary compensation",
`Please indicate the currency` = "currency of participants income",
`If "Other," please indicate the currency here:` = "If currency was not part of the provided options, participants specify here",
`What country do you work in?` = "country where participants work",
`If you're in the U.S., what state do you work in?` = "state if participants work in the US",
`What city do you work in?` = "city where participants work",)
thing <- list(`How much additional monetary compensation do you get, if any (for example, bonuses or overtime in an average year)? Please only include monetary compensation here, not the value of benefits.` = "Monetary compensation",
`Please indicate the currency` = "currency of participants income",
`If "Other," please indicate the currency here:` = "If currency was not part of the provided options, participants specify here",
`What country do you work in?` = "country where participants work",
`If you're in the U.S., what state do you work in?` = "state if participants work in the US",
`What city do you work in?` = "city where participants work")
thing <- list(`How many years of professional work experience do you have overall?` = "years of work experience, provided in a range of years",
`How many years of professional work experience do you have in your field?` = "years of work experience in specified industry, provided in a range of years",
`What is your highest level of education completed?` = "highest education level completed",
`What is your gender?` = "participants' gender",
`What is your race? (Choose all that apply.)` = "participants' race, participants selected all that applied")
source("D:/Coding/QTM150/codebookforproject.Rmd")
source("D:/Coding/QTM150/codebookforproject.Rmd")
source("D:/Coding/QTM150/codebookforproject.Rmd")
?var_label
salary <- read.csv("./Datasets/salary.csv")
colnames(salary)
